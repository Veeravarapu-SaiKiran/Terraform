This is first line
THis is second line
local = {
      source = "hashicorp/local"
      version = "2.5.2"
    }
  }
}

# provider "local" {

# }

# Creates local file with given content.
# path.module is a built-in expression that refers to the filesystem path of the module where the configuration is defined.
# It provides the absolute path to the directory containing the current module's .tf files.
resource "local_file" "foo" {
  content = "foo!"  
  filename = "${path.module}/foo.bar"
}

# Creates local file with given multiline strings content
resource "local_file" "foo1" {  # EOF is a delimiter
  content = <<EOF
This is first line
THis is second line
  EOF
  filename = "${path.module}/foo.bar"
}

# Creates a local file with the same content as the file specified in the source argument.
resource "local_file" "foo2" {
  source = "./main.tf"
  filename = "${path.module}/foo.bar"
}

# Creates local file with given sensitive content. when you are applying terraform configuration,
# content will be sensitive and it wont be visible in terraform apply logs like below.
#   + resource "local_sensitive_file" "foo" {
#       + content              = (sensitive value)
#       + content_base64sha256 = (known after apply)
#       + content_base64sha512 = (known after apply)
#       + content_md5          = (known after apply)
#       + content_sha1         = (known after apply)
#       + content_sha256       = (known after apply)
#       + content_sha512       = (known after apply)
#       + directory_permission = "0700"
#       + file_permission      = "0700"
#       + filename             = "./foo.bar"
#       + id                   = (known after apply)
#     }

resource "local_sensitive_file" "foo" {
  content = "foo! with local_sensitive_file"
  filename = "${path.module}/foo.bar"
}

# The content_base64 argument allows you to provide file content as a Base64-encoded string.
# This is useful for binary data or when encoding is required.
# base64encode is a Terraform function that encodes the given string in Base64.
resource "local_file" "name" {
  filename = "example.txt"
  content_base64 = base64encode("Hello there !")
}

# The directory_permission argument defines the permissions to be set for any directories created by the local_file resource.
# If path/to does not exist, Terraform will create the necessary directories, and their permissions will be set to 0755.
# When the directory does not exist: Terraform will create the directory with the specified directory_permission.
# When the directory already exists: Terraform will not change the permissions of the existing directory. The permissions for existing directories will remain as they were before applying the configuration.
resource "local_file" "name1" {
  filename = "${path.module}/saikiran/example.txt"
  directory_permission = "0755"
  content = "Hello you are with directory_persmission argument"
}